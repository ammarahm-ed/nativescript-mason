// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Mason
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import Mason
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @objc(TSCMason) @objcMembers public class TSCMason : ObjectiveC.NSObject {
  @objc public var nativePtr: Swift.UnsafeMutableRawPointer! {
    get
  }
  @objc override dynamic public init()
  @objc deinit
  @objc public func clear()
  @objc public static let instance: Mason.TSCMason
  @objc public static var shared: Swift.Bool
  @objc public static var alwaysEnable: Swift.Bool
}
@_inheritsConvenienceInitializers @objcMembers @objc(MeasureOutput) public class MeasureOutput : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(MasonNode) @objcMembers public class MasonNode : ObjectiveC.NSObject {
  @objc public var nativePtr: Swift.UnsafeMutableRawPointer! {
    get
  }
  public typealias MeasureFunc = (CoreFoundation.CGSize?, CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @objc public var style: Mason.MasonStyle {
    @objc get
    @objc set
  }
  @objc public var isEnabled: Swift.Bool
  @objc public var data: Swift.AnyObject? {
    @objc get
    @objc set
  }
  @objc public var owner: Mason.MasonNode? {
    get
  }
  @objc public var children: [Mason.MasonNode] {
    get
  }
  @objc override dynamic public init()
  @objc public init(style: Mason.MasonStyle)
  @objc public init(style: Mason.MasonStyle, children: [Mason.MasonNode])
  public init(style: Mason.MasonStyle, measureFunc: @escaping Mason.MasonNode.MeasureFunc)
  @objc deinit
  @objc public var isDirty: Swift.Bool {
    @objc get
  }
  @objc public func markDirty()
  @objc public func computeWithViewSize()
  @objc public func setChildren(children: [Mason.MasonNode])
  @objc public func addChildren(_ children: [Mason.MasonNode])
  @objc public var isLeaf: Swift.Bool {
    @objc get
  }
  @objc public func configure(_ block: (Mason.MasonNode) -> Swift.Void)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(MasonLayout) @objcMembers public class MasonLayout : ObjectiveC.NSObject {
  @objc final public let order: Swift.Int
  @objc final public let x: Swift.Float
  @objc final public let y: Swift.Float
  @objc final public let width: Swift.Float
  @objc final public let height: Swift.Float
  @objc final public let children: [Mason.MasonLayout]
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(MasonReexports) public class MasonReexports : ObjectiveC.NSObject {
  @objc public static func node_compute(_ mason: Swift.UnsafeMutableRawPointer, _ node: Swift.UnsafeMutableRawPointer)
  @objc public static func node_compute_wh(_ mason: Swift.UnsafeMutableRawPointer, _ node: Swift.UnsafeMutableRawPointer, width: Swift.Float, height: Swift.Float)
  @objc public static func node_compute_max_content(_ mason: Swift.UnsafeMutableRawPointer, _ node: Swift.UnsafeMutableRawPointer)
  @objc public static func node_compute_min_content(_ mason: Swift.UnsafeMutableRawPointer, _ node: Swift.UnsafeMutableRawPointer)
  @objc public static func style_get_display(_ style: Swift.UnsafeMutableRawPointer) -> Swift.Int32
  @objc public static func style_set_display(_ style: Swift.UnsafeMutableRawPointer, _ display: Swift.Int32)
  @objc public static func style_get_position_type(_ style: Swift.UnsafeMutableRawPointer) -> Swift.Int32
  @objc public static func style_set_position_type(_ style: Swift.UnsafeMutableRawPointer, _ position: Swift.Int32)
  @objc public static func style_get_direction(_ style: Swift.UnsafeMutableRawPointer) -> Swift.Int32
  @objc public static func style_set_direction(_ style: Swift.UnsafeMutableRawPointer, _ direction: Swift.Int32)
  @objc public static func style_get_flex_direction(_ style: Swift.UnsafeMutableRawPointer) -> Swift.Int32
  @objc public static func style_set_flex_direction(_ style: Swift.UnsafeMutableRawPointer, _ flex_direction: Swift.Int32)
  @objc public static func style_get_flex_wrap(_ style: Swift.UnsafeMutableRawPointer) -> Swift.Int32
  @objc public static func style_set_flex_wrap(_ style: Swift.UnsafeMutableRawPointer, _ flex_wrap: Swift.Int32)
  @objc public static func style_get_overflow(_ style: Swift.UnsafeMutableRawPointer) -> Swift.Int32
  @objc public static func style_set_overflow(_ style: Swift.UnsafeMutableRawPointer, _ overflow: Swift.Int32)
  @objc public static func style_get_align_items(_ style: Swift.UnsafeMutableRawPointer) -> Swift.Int32
  @objc public static func style_set_align_items(_ style: Swift.UnsafeMutableRawPointer, _ align_items: Swift.Int32)
  @objc public static func style_get_align_self(_ style: Swift.UnsafeMutableRawPointer) -> Swift.Int32
  @objc public static func style_set_align_self(_ style: Swift.UnsafeMutableRawPointer, _ align_self: Swift.Int32)
  @objc public static func style_get_align_content(_ style: Swift.UnsafeMutableRawPointer) -> Swift.Int32
  @objc public static func style_set_align_content(_ style: Swift.UnsafeMutableRawPointer, _ align_content: Swift.Int32)
  @objc public static func style_get_justify_content(_ style: Swift.UnsafeMutableRawPointer) -> Swift.Int32
  @objc public static func style_set_justify_content(_ style: Swift.UnsafeMutableRawPointer, _ justify_content: Swift.Int32)
  @objc public static func style_get_position_left(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_position_left(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_position_right(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_position_right(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_position_top(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_position_top(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_position_bottom(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_position_bottom(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_margin_left(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_margin_left(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_margin_right(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_margin_right(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_margin_top(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_margin_top(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_margin_bottom(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_margin_bottom(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_padding_left(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_padding_left(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_padding_right(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_padding_right(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_padding_top(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_padding_top(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_padding_bottom(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_padding_bottom(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_border_left(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_border_left(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_border_right(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_border_right(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_border_top(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_border_top(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_border_bottom(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_border_bottom(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_flex_grow(_ style: Swift.UnsafeMutableRawPointer) -> Swift.Float
  @objc public static func style_set_border_bottom(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float)
  @objc public static func style_get_flex_shrink(_ style: Swift.UnsafeMutableRawPointer) -> Swift.Float
  @objc public static func style_set_flex_shrink(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float)
  @objc public static func style_set_flex_basis(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_flex_basis(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_get_width(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_width(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_height(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_height(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_min_width(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_min_width(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_min_height(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_min_height(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_max_width(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_max_width(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_max_height(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_max_height(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_gap_width(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_gap_width(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_gap_height(_ style: Swift.UnsafeMutableRawPointer) -> Mason.CMasonDimension
  @objc public static func style_set_gap_height(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float, _ value_type: Mason.CMasonDimensionType)
  @objc public static func style_get_aspect_ratio(_ style: Swift.UnsafeMutableRawPointer) -> Swift.Float
  @objc public static func style_set_aspect_ratio(_ style: Swift.UnsafeMutableRawPointer, _ value: Swift.Float)
  @objc public static func style_update_with_values(_ style: Swift.UnsafeMutableRawPointer, _ display: Swift.Int32, _ positionType: Swift.Int32, _ direction: Swift.Int32, _ flexDirection: Swift.Int32, _ flexWrap: Swift.Int32, _ overflow: Swift.Int32, _ alignItems: Swift.Int32, _ alignSelf: Swift.Int32, _ alignContent: Swift.Int32, _ justifyContent: Swift.Int32, _ positionLeftType: Swift.Int32, _ positionLeftValue: Swift.Float, _ positionRightType: Swift.Int32, _ positionRightValue: Swift.Float, _ positionTopType: Swift.Int32, _ positionTopValue: Swift.Float, _ positionBottomType: Swift.Int32, _ positionBottomValue: Swift.Float, _ marginLeftType: Swift.Int32, _ marginLeftValue: Swift.Float, _ marginRightType: Swift.Int32, _ marginRightValue: Swift.Float, _ marginTopType: Swift.Int32, _ marginTopValue: Swift.Float, _ marginBottomType: Swift.Int32, _ marginBottomValue: Swift.Float, _ paddingLeftType: Swift.Int32, _ paddingLeftValue: Swift.Float, _ paddingRightType: Swift.Int32, _ paddingRightValue: Swift.Float, _ paddingTopType: Swift.Int32, _ paddingTopValue: Swift.Float, _ paddingBottomType: Swift.Int32, _ paddingBottomValue: Swift.Float, _ borderLeftType: Swift.Int32, _ borderLeftValue: Swift.Float, _ borderRightType: Swift.Int32, _ borderRightValue: Swift.Float, _ borderTopType: Swift.Int32, _ borderTopValue: Swift.Float, _ borderBottomType: Swift.Int32, _ borderBottomValue: Swift.Float, _ flexGrow: Swift.Float, _ flexShrink: Swift.Float, _ flexBasisType: Swift.Int32, _ flexBasisValue: Swift.Float, _ widthType: Swift.Int32, _ widthValue: Swift.Float, _ heightType: Swift.Int32, _ heightValue: Swift.Float, _ minWidthType: Swift.Int32, _ minWidthValue: Swift.Float, _ minHeightType: Swift.Int32, _ minHeightValue: Swift.Float, _ maxWidthType: Swift.Int32, _ maxWidthValue: Swift.Float, _ maxHeightType: Swift.Int32, _ maxHeightValue: Swift.Float, _ flexGapWidthType: Swift.Int32, _ flexGapWidthValue: Swift.Float, _ flexGapHeightType: Swift.Int32, _ flexGapHeightValue: Swift.Float, aspectRatio: Swift.Float)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MasonStyle) @objcMembers public class MasonStyle : ObjectiveC.NSObject {
  @objc public var nativePtr: Swift.UnsafeMutableRawPointer! {
    get
  }
  @objc override dynamic public init()
  @objc deinit
  @objc public var display: Mason.Display {
    @objc get
    @objc set
  }
  @objc public var positionType: Mason.PositionType {
    @objc get
    @objc set
  }
  @objc public var direction: Mason.Direction {
    @objc get
    @objc set
  }
  @objc public var flexDirection: Mason.FlexDirection {
    @objc get
    @objc set
  }
  @objc public var flexWrap: Mason.FlexWrap {
    @objc get
    @objc set
  }
  @objc public var overflow: Mason.Overflow {
    @objc get
    @objc set
  }
  @objc public var alignItems: Mason.AlignItems {
    @objc get
    @objc set
  }
  @objc public var alignSelf: Mason.AlignSelf {
    @objc get
    @objc set
  }
  @objc public var alignContent: Mason.AlignContent {
    @objc get
    @objc set
  }
  @objc public var justifyContent: Mason.JustifyContent {
    @objc get
    @objc set
  }
  public var position: Mason.MasonRect<Mason.MasonDimension> {
    get
    set
  }
  @objc public var positionCompat: Mason.MasonRectCompat {
    @objc get
    @objc set
  }
  @objc public func setPositionLeft(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setPositionRight(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setPositionTop(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setPositionBottom(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setPositionWithValueType(_ value: Swift.Float, _ type: Swift.Int)
  public var margin: Mason.MasonRect<Mason.MasonDimension> {
    get
    set
  }
  @objc public var marginCompat: Mason.MasonRectCompat {
    @objc get
    @objc set
  }
  @objc public func setMarginLeft(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setMarginRight(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setMarginTop(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setMarginBottom(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setMarginWithValueType(_ value: Swift.Float, _ type: Swift.Int)
  public var padding: Mason.MasonRect<Mason.MasonDimension> {
    get
    set
  }
  @objc public var paddingCompat: Mason.MasonRectCompat {
    @objc get
    @objc set
  }
  @objc public func setPaddingLeft(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setPaddingRight(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setPaddingTop(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setPaddingBottom(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setPaddingWithValueType(_ value: Swift.Float, _ type: Swift.Int)
  public var border: Mason.MasonRect<Mason.MasonDimension> {
    get
    set
  }
  @objc public var borderCompat: Mason.MasonRectCompat {
    @objc get
    @objc set
  }
  @objc public func setBorderLeft(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setBorderRight(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setBorderTop(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setBorderBottom(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setBorderWithValueType(_ value: Swift.Float, _ type: Swift.Int)
  @objc public var flexGrow: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var flexShrink: Swift.Float {
    @objc get
    @objc set
  }
  public var flexBasis: Mason.MasonDimension {
    get
    set
  }
  public var minSize: Mason.MasonSize<Mason.MasonDimension> {
    get
    set
  }
  @objc public var minSizeCompat: Mason.MasonSizeCompat {
    @objc get
    @objc set
  }
  @objc public func setMinSizeWidth(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setMinSizeHeight(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setMinSizeWidthHeight(_ value: Swift.Float, _ type: Swift.Int)
  public var size: Mason.MasonSize<Mason.MasonDimension> {
    get
    set
  }
  @objc public var sizeCompat: Mason.MasonSizeCompat {
    @objc get
    @objc set
  }
  @objc public var sizeCompatWidth: Mason.MasonDimensionCompat {
    @objc get
    @objc set
  }
  @objc public var sizeCompatHeight: Mason.MasonDimensionCompat {
    @objc get
    @objc set
  }
  @objc public func setSizeWidth(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setSizeHeight(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setSizeWidthHeight(_ value: Swift.Float, _ type: Swift.Int)
  public var maxSize: Mason.MasonSize<Mason.MasonDimension> {
    get
    set
  }
  @objc public var maxSizeCompat: Mason.MasonSizeCompat {
    @objc get
    @objc set
  }
  @objc public func setMaxSizeWidth(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setMaxSizeHeight(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setMaxSizeWidthHeight(_ value: Swift.Float, _ type: Swift.Int)
  public var flexGap: Mason.MasonSize<Mason.MasonDimension> {
    get
    set
  }
  @objc public var flexGapCompat: Mason.MasonSizeCompat {
    @objc get
    @objc set
  }
  @objc public func setFlexGapWidth(_ value: Swift.Float, _ type: Swift.Int)
  @objc public func setFlexGapHeight(_ value: Swift.Float, _ type: Swift.Int)
  public var aspectRatio: Swift.Float? {
    get
    set
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objcMembers @objc(MasonRectCompat) public class MasonRectCompat : ObjectiveC.NSObject {
  @objc public var left: Mason.MasonDimensionCompat
  @objc public var right: Mason.MasonDimensionCompat
  @objc public var top: Mason.MasonDimensionCompat
  @objc public var bottom: Mason.MasonDimensionCompat
  @objc public init(_ left: Mason.MasonDimensionCompat, _ right: Mason.MasonDimensionCompat, _ top: Mason.MasonDimensionCompat, _ bottom: Mason.MasonDimensionCompat)
  public init(_ rect: Mason.MasonRect<Mason.MasonDimension>)
  @objc deinit
}
public struct MasonRect<T> {
  public init(_ left: T, _ right: T, _ top: T, _ bottom: T)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(MasonSizeCompat) public class MasonSizeCompat : ObjectiveC.NSObject {
  @objc public var width: Mason.MasonDimensionCompat
  @objc public var height: Mason.MasonDimensionCompat
  public init(_ size: Mason.MasonSize<Mason.MasonDimension>)
  @objc deinit
}
public struct MasonSize<T> {
  public init(_ width: T, _ height: T)
}
public let MasonSizeMaxPercentWH: Mason.MasonSize<Mason.MasonDimension>
@objc(MasonDimensionCompatType) public enum MasonDimensionCompatType : Swift.Int, Swift.RawRepresentable {
  case Points
  case Percent
  case Auto
  case Undefined
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.MasonDimensionCompatType.RawValue {
    get
  }
  public init?(rawValue: Mason.MasonDimensionCompatType.RawValue)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(MasonDimensionCompat) public class MasonDimensionCompat : ObjectiveC.NSObject {
  @objc public init(points: Swift.Float)
  @objc public init(percent: Swift.Float)
  @objc public var type: Mason.MasonDimensionCompatType {
    @objc get
  }
  @objc public var value: Swift.Float {
    @objc get
  }
  @objc public var cssValue: Swift.String {
    @objc get
  }
  @objc public static let Undefined: Mason.MasonDimensionCompat
  @objc public static let Auto: Mason.MasonDimensionCompat
  @objc deinit
}
public func MasonDimensionFromPoints(value: Swift.Float) -> Mason.MasonDimension
public func MasonDimensionFromPercent(value: Swift.Float) -> Mason.MasonDimension
public let MasonDimensionAuto: Mason.MasonDimension
public let MasonDimensionUndefined: Mason.MasonDimension
public enum MasonDimension {
  case Points(Swift.Float)
  case Percent(Swift.Float)
  case Auto
  case Undefined
  public var cssValue: Swift.String {
    get
  }
}
@objc(AlignItems) public enum AlignItems : Swift.Int, Swift.RawRepresentable {
  case FlexStart
  case FlexEnd
  case Center
  case Baseline
  case Stretch
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.AlignItems.RawValue {
    get
  }
  public init?(rawValue: Mason.AlignItems.RawValue)
}
@objc(AlignSelf) public enum AlignSelf : Swift.Int, Swift.RawRepresentable {
  case Auto
  case FlexStart
  case FlexEnd
  case Center
  case Baseline
  case Stretch
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.AlignSelf.RawValue {
    get
  }
  public init?(rawValue: Mason.AlignSelf.RawValue)
}
@objc(AlignContent) public enum AlignContent : Swift.Int, Swift.RawRepresentable {
  case FlexStart
  case FlexEnd
  case Center
  case Stretch
  case SpaceBetween
  case SpaceAround
  case SpaceEvenly
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.AlignContent.RawValue {
    get
  }
  public init?(rawValue: Mason.AlignContent.RawValue)
}
@objc(Direction) public enum Direction : Swift.Int, Swift.RawRepresentable {
  case Inherit
  case LTR
  case RTL
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.Direction.RawValue {
    get
  }
  public init?(rawValue: Mason.Direction.RawValue)
}
@objc(Display) public enum Display : Swift.Int, Swift.RawRepresentable {
  case Flex
  case None
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.Display.RawValue {
    get
  }
  public init?(rawValue: Mason.Display.RawValue)
}
@objc(FlexDirection) public enum FlexDirection : Swift.Int, Swift.RawRepresentable {
  case Row
  case Column
  case RowReverse
  case ColumnReverse
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.FlexDirection.RawValue {
    get
  }
  public init?(rawValue: Mason.FlexDirection.RawValue)
}
@objc(JustifyContent) public enum JustifyContent : Swift.Int, Swift.RawRepresentable {
  case FlexStart
  case FlexEnd
  case Center
  case SpaceBetween
  case SpaceAround
  case SpaceEvenly
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.JustifyContent.RawValue {
    get
  }
  public init?(rawValue: Mason.JustifyContent.RawValue)
}
@objc(Overflow) public enum Overflow : Swift.Int, Swift.RawRepresentable {
  case Visible
  case Hidden
  case Scroll
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.Overflow.RawValue {
    get
  }
  public init?(rawValue: Mason.Overflow.RawValue)
}
@objc(PositionType) public enum PositionType : Swift.Int, Swift.RawRepresentable {
  case Relative
  case Absolute
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.PositionType.RawValue {
    get
  }
  public init?(rawValue: Mason.PositionType.RawValue)
}
@objc(FlexWrap) public enum FlexWrap : Swift.Int, Swift.RawRepresentable {
  case NoWrap
  case Wrap
  case WrapReverse
  public typealias RawValue = Swift.Int32
  public var rawValue: Mason.FlexWrap.RawValue {
    get
  }
  public init?(rawValue: Mason.FlexWrap.RawValue)
}
extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var mason: Mason.MasonNode {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public static var masonPtr: Swift.Int {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var masonNodePtr: Swift.Int {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var masonStylePtr: Swift.Int {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var isMasonEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var style: Mason.MasonStyle {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addSubviews(_ views: [UIKit.UIView])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addSubviews(_ views: [UIKit.UIView], at index: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setPadding(_ left: Swift.Float, _ top: Swift.Float, _ right: Swift.Float, _ bottom: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setBorder(_ left: Swift.Float, _ top: Swift.Float, _ right: Swift.Float, _ bottom: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setMargin(_ left: Swift.Float, _ top: Swift.Float, _ right: Swift.Float, _ bottom: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setPosition(_ left: Swift.Float, _ top: Swift.Float, _ right: Swift.Float, _ bottom: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setMinSize(_ width: Swift.Float, _ height: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setSize(_ width: Swift.Float, _ height: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setMaxSize(_ width: Swift.Float, _ height: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setFlexGap(_ width: Swift.Float, _ height: Swift.Float)
}
extension Mason.MasonDimensionCompatType : Swift.Equatable {}
extension Mason.MasonDimensionCompatType : Swift.Hashable {}
extension Mason.AlignItems : Swift.Equatable {}
extension Mason.AlignItems : Swift.Hashable {}
extension Mason.AlignSelf : Swift.Equatable {}
extension Mason.AlignSelf : Swift.Hashable {}
extension Mason.AlignContent : Swift.Equatable {}
extension Mason.AlignContent : Swift.Hashable {}
extension Mason.Direction : Swift.Equatable {}
extension Mason.Direction : Swift.Hashable {}
extension Mason.Display : Swift.Equatable {}
extension Mason.Display : Swift.Hashable {}
extension Mason.FlexDirection : Swift.Equatable {}
extension Mason.FlexDirection : Swift.Hashable {}
extension Mason.JustifyContent : Swift.Equatable {}
extension Mason.JustifyContent : Swift.Hashable {}
extension Mason.Overflow : Swift.Equatable {}
extension Mason.Overflow : Swift.Hashable {}
extension Mason.PositionType : Swift.Equatable {}
extension Mason.PositionType : Swift.Hashable {}
extension Mason.FlexWrap : Swift.Equatable {}
extension Mason.FlexWrap : Swift.Hashable {}
